What happens when you initialize a repository? Why do you need to do it?
The git version control initialized in the repo: a .git folder appears, and changes will be tracked from now on. This is necessary as before initializing a repository, the fiels weren't tracked in that folder.

How is the staging area different from the working directory and the repository? What value do you think it offers?
The staging area acts as an intermediate before commiting a change. It makes it easier to "build up" our commit properly, plus it adds an extra layer of security if added some unwanted files.

How can you use the staging area to make sure you have one commit per logical change?
I can check what I am about to change before I actually commit. git diff --staged will show me the difference between the staged version and the committed one.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?
Let's sat that more than one people are working on the same code, and they don't want to interrupt each other. Or, you'd like to add experimental features apart from the main version, which may or may not be merged later.

How do the diagrams help you visualize the branch structure?
It shows how the branches are related to each other. We will know what happened on each branch, and when did they brached off or merged back to each other.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
As a result of branching, the code of the different branches are compared and combined together. The diagram is a good representation as it visualizes the sequential nature of commits.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
Pro of automatic merging is that it saves time - the con is that it cannot solve every conflict by itself. Then comes the manual merging - which is a tedious job (downside) but will reflect the desired intent of the authors for sure (upside).
